// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_segment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map_segment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace map_segment {

namespace {

const ::google::protobuf::Descriptor* map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_keyframe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_keyframe_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_landmark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_landmark_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_Mat44_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_Mat44_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_merge_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_merge_message_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_5fsegment_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_map_5fsegment_2eproto() {
  protobuf_AddDesc_map_5fsegment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map_segment.proto");
  GOOGLE_CHECK(file != NULL);
  map_descriptor_ = file->message_type(0);
  static const int map_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map, keyframes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map, landmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map, merge_ids_),
  };
  map_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      map_descriptor_,
      map::default_instance_,
      map_offsets_,
      -1,
      -1,
      -1,
      sizeof(map),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map, _is_default_instance_));
  map_keyframe_descriptor_ = map_descriptor_->nested_type(0);
  static const int map_keyframe_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_keyframe, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_keyframe, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_keyframe, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_keyframe, map_id_),
  };
  map_keyframe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      map_keyframe_descriptor_,
      map_keyframe::default_instance_,
      map_keyframe_offsets_,
      -1,
      -1,
      -1,
      sizeof(map_keyframe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_keyframe, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_keyframe, _is_default_instance_));
  map_edge_descriptor_ = map_descriptor_->nested_type(1);
  static const int map_edge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_edge, id0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_edge, id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_edge, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_edge, map_id_),
  };
  map_edge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      map_edge_descriptor_,
      map_edge::default_instance_,
      map_edge_offsets_,
      -1,
      -1,
      -1,
      sizeof(map_edge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_edge, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_edge, _is_default_instance_));
  map_landmark_descriptor_ = map_descriptor_->nested_type(2);
  static const int map_landmark_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_landmark, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_landmark, coords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_landmark, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_landmark, map_id_),
  };
  map_landmark_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      map_landmark_descriptor_,
      map_landmark::default_instance_,
      map_landmark_offsets_,
      -1,
      -1,
      -1,
      sizeof(map_landmark),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_landmark, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_landmark, _is_default_instance_));
  map_Mat44_descriptor_ = map_descriptor_->nested_type(3);
  static const int map_Mat44_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_Mat44, pose_),
  };
  map_Mat44_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      map_Mat44_descriptor_,
      map_Mat44::default_instance_,
      map_Mat44_offsets_,
      -1,
      -1,
      -1,
      sizeof(map_Mat44),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_Mat44, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_Mat44, _is_default_instance_));
  map_merge_message_descriptor_ = map_descriptor_->nested_type(4);
  static const int map_merge_message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_merge_message, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_merge_message, dest_),
  };
  map_merge_message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      map_merge_message_descriptor_,
      map_merge_message::default_instance_,
      map_merge_message_offsets_,
      -1,
      -1,
      -1,
      sizeof(map_merge_message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_merge_message, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_merge_message, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_5fsegment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      map_descriptor_, &map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      map_keyframe_descriptor_, &map_keyframe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      map_edge_descriptor_, &map_edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      map_landmark_descriptor_, &map_landmark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      map_Mat44_descriptor_, &map_Mat44::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      map_merge_message_descriptor_, &map_merge_message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_5fsegment_2eproto() {
  delete map::default_instance_;
  delete map_reflection_;
  delete map_keyframe::default_instance_;
  delete map_keyframe_reflection_;
  delete map_edge::default_instance_;
  delete map_edge_reflection_;
  delete map_landmark::default_instance_;
  delete map_landmark_reflection_;
  delete map_Mat44::default_instance_;
  delete map_Mat44_reflection_;
  delete map_merge_message::default_instance_;
  delete map_merge_message_reflection_;
}

void protobuf_AddDesc_map_5fsegment_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_map_5fsegment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021map_segment.proto\022\013map_segment\"\350\003\n\003map"
    "\022,\n\tkeyframes\030\001 \003(\0132\031.map_segment.map.ke"
    "yframe\022$\n\005edges\030\002 \003(\0132\025.map_segment.map."
    "edge\022,\n\tlandmarks\030\003 \003(\0132\031.map_segment.ma"
    "p.landmark\0221\n\tmerge_ids\030\004 \001(\0132\036.map_segm"
    "ent.map.merge_message\032^\n\010keyframe\022\n\n\002id\030"
    "\001 \001(\r\022$\n\004pose\030\002 \001(\0132\026.map_segment.map.Ma"
    "t44\022\020\n\010robot_id\030\003 \001(\r\022\016\n\006map_id\030\004 \001(\r\032B\n"
    "\004edge\022\013\n\003id0\030\001 \001(\r\022\013\n\003id1\030\002 \001(\r\022\020\n\010robot"
    "_id\030\003 \001(\r\022\016\n\006map_id\030\004 \001(\r\032E\n\010landmark\022\n\n"
    "\002id\030\001 \001(\r\022\016\n\006coords\030\002 \003(\001\022\r\n\005color\030\003 \003(\001"
    "\022\016\n\006map_id\030\004 \001(\r\032\025\n\005Mat44\022\014\n\004pose\030\001 \003(\001\032"
    "*\n\rmerge_message\022\013\n\003src\030\001 \001(\r\022\014\n\004dest\030\002 "
    "\001(\rb\006proto3", 531);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_segment.proto", &protobuf_RegisterTypes);
  map::default_instance_ = new map();
  map_keyframe::default_instance_ = new map_keyframe();
  map_edge::default_instance_ = new map_edge();
  map_landmark::default_instance_ = new map_landmark();
  map_Mat44::default_instance_ = new map_Mat44();
  map_merge_message::default_instance_ = new map_merge_message();
  map::default_instance_->InitAsDefaultInstance();
  map_keyframe::default_instance_->InitAsDefaultInstance();
  map_edge::default_instance_->InitAsDefaultInstance();
  map_landmark::default_instance_->InitAsDefaultInstance();
  map_Mat44::default_instance_->InitAsDefaultInstance();
  map_merge_message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_5fsegment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_5fsegment_2eproto {
  StaticDescriptorInitializer_map_5fsegment_2eproto() {
    protobuf_AddDesc_map_5fsegment_2eproto();
  }
} static_descriptor_initializer_map_5fsegment_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int map_keyframe::kIdFieldNumber;
const int map_keyframe::kPoseFieldNumber;
const int map_keyframe::kRobotIdFieldNumber;
const int map_keyframe::kMapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

map_keyframe::map_keyframe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map_segment.map.keyframe)
}

void map_keyframe::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pose_ = const_cast< ::map_segment::map_Mat44*>(&::map_segment::map_Mat44::default_instance());
}

map_keyframe::map_keyframe(const map_keyframe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:map_segment.map.keyframe)
}

void map_keyframe::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  pose_ = NULL;
  robot_id_ = 0u;
  map_id_ = 0u;
}

map_keyframe::~map_keyframe() {
  // @@protoc_insertion_point(destructor:map_segment.map.keyframe)
  SharedDtor();
}

void map_keyframe::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void map_keyframe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map_keyframe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_keyframe_descriptor_;
}

const map_keyframe& map_keyframe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_5fsegment_2eproto();
  return *default_instance_;
}

map_keyframe* map_keyframe::default_instance_ = NULL;

map_keyframe* map_keyframe::New(::google::protobuf::Arena* arena) const {
  map_keyframe* n = new map_keyframe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void map_keyframe::Clear() {
// @@protoc_insertion_point(message_clear_start:map_segment.map.keyframe)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(map_keyframe, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<map_keyframe*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, map_id_);
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool map_keyframe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:map_segment.map.keyframe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // optional .map_segment.map.Mat44 pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_robot_id;
        break;
      }

      // optional uint32 robot_id = 3;
      case 3: {
        if (tag == 24) {
         parse_robot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 4;
      case 4: {
        if (tag == 32) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:map_segment.map.keyframe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:map_segment.map.keyframe)
  return false;
#undef DO_
}

void map_keyframe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:map_segment.map.keyframe)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .map_segment.map.Mat44 pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  // optional uint32 robot_id = 3;
  if (this->robot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->robot_id(), output);
  }

  // optional uint32 map_id = 4;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->map_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:map_segment.map.keyframe)
}

::google::protobuf::uint8* map_keyframe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_segment.map.keyframe)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .map_segment.map.Mat44 pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, false, target);
  }

  // optional uint32 robot_id = 3;
  if (this->robot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->robot_id(), target);
  }

  // optional uint32 map_id = 4;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->map_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:map_segment.map.keyframe)
  return target;
}

int map_keyframe::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:map_segment.map.keyframe)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional .map_segment.map.Mat44 pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // optional uint32 robot_id = 3;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // optional uint32 map_id = 4;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map_keyframe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_segment.map.keyframe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const map_keyframe* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const map_keyframe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_segment.map.keyframe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_segment.map.keyframe)
    MergeFrom(*source);
  }
}

void map_keyframe::MergeFrom(const map_keyframe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_segment.map.keyframe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_pose()) {
    mutable_pose()->::map_segment::map_Mat44::MergeFrom(from.pose());
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
}

void map_keyframe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_segment.map.keyframe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_keyframe::CopyFrom(const map_keyframe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_segment.map.keyframe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_keyframe::IsInitialized() const {

  return true;
}

void map_keyframe::Swap(map_keyframe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void map_keyframe::InternalSwap(map_keyframe* other) {
  std::swap(id_, other->id_);
  std::swap(pose_, other->pose_);
  std::swap(robot_id_, other->robot_id_);
  std::swap(map_id_, other->map_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata map_keyframe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_keyframe_descriptor_;
  metadata.reflection = map_keyframe_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int map_edge::kId0FieldNumber;
const int map_edge::kId1FieldNumber;
const int map_edge::kRobotIdFieldNumber;
const int map_edge::kMapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

map_edge::map_edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map_segment.map.edge)
}

void map_edge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

map_edge::map_edge(const map_edge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:map_segment.map.edge)
}

void map_edge::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id0_ = 0u;
  id1_ = 0u;
  robot_id_ = 0u;
  map_id_ = 0u;
}

map_edge::~map_edge() {
  // @@protoc_insertion_point(destructor:map_segment.map.edge)
  SharedDtor();
}

void map_edge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void map_edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map_edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_edge_descriptor_;
}

const map_edge& map_edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_5fsegment_2eproto();
  return *default_instance_;
}

map_edge* map_edge::default_instance_ = NULL;

map_edge* map_edge::New(::google::protobuf::Arena* arena) const {
  map_edge* n = new map_edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void map_edge::Clear() {
// @@protoc_insertion_point(message_clear_start:map_segment.map.edge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(map_edge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<map_edge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id0_, map_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool map_edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:map_segment.map.edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id0 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id1;
        break;
      }

      // optional uint32 id1 = 2;
      case 2: {
        if (tag == 16) {
         parse_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_robot_id;
        break;
      }

      // optional uint32 robot_id = 3;
      case 3: {
        if (tag == 24) {
         parse_robot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 4;
      case 4: {
        if (tag == 32) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:map_segment.map.edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:map_segment.map.edge)
  return false;
#undef DO_
}

void map_edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:map_segment.map.edge)
  // optional uint32 id0 = 1;
  if (this->id0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id0(), output);
  }

  // optional uint32 id1 = 2;
  if (this->id1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id1(), output);
  }

  // optional uint32 robot_id = 3;
  if (this->robot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->robot_id(), output);
  }

  // optional uint32 map_id = 4;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->map_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:map_segment.map.edge)
}

::google::protobuf::uint8* map_edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_segment.map.edge)
  // optional uint32 id0 = 1;
  if (this->id0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id0(), target);
  }

  // optional uint32 id1 = 2;
  if (this->id1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id1(), target);
  }

  // optional uint32 robot_id = 3;
  if (this->robot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->robot_id(), target);
  }

  // optional uint32 map_id = 4;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->map_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:map_segment.map.edge)
  return target;
}

int map_edge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:map_segment.map.edge)
  int total_size = 0;

  // optional uint32 id0 = 1;
  if (this->id0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id0());
  }

  // optional uint32 id1 = 2;
  if (this->id1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id1());
  }

  // optional uint32 robot_id = 3;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // optional uint32 map_id = 4;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map_edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_segment.map.edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const map_edge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const map_edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_segment.map.edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_segment.map.edge)
    MergeFrom(*source);
  }
}

void map_edge::MergeFrom(const map_edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_segment.map.edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id0() != 0) {
    set_id0(from.id0());
  }
  if (from.id1() != 0) {
    set_id1(from.id1());
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
}

void map_edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_segment.map.edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_edge::CopyFrom(const map_edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_segment.map.edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_edge::IsInitialized() const {

  return true;
}

void map_edge::Swap(map_edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void map_edge::InternalSwap(map_edge* other) {
  std::swap(id0_, other->id0_);
  std::swap(id1_, other->id1_);
  std::swap(robot_id_, other->robot_id_);
  std::swap(map_id_, other->map_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata map_edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_edge_descriptor_;
  metadata.reflection = map_edge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int map_landmark::kIdFieldNumber;
const int map_landmark::kCoordsFieldNumber;
const int map_landmark::kColorFieldNumber;
const int map_landmark::kMapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

map_landmark::map_landmark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map_segment.map.landmark)
}

void map_landmark::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

map_landmark::map_landmark(const map_landmark& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:map_segment.map.landmark)
}

void map_landmark::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  map_id_ = 0u;
}

map_landmark::~map_landmark() {
  // @@protoc_insertion_point(destructor:map_segment.map.landmark)
  SharedDtor();
}

void map_landmark::SharedDtor() {
  if (this != default_instance_) {
  }
}

void map_landmark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map_landmark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_landmark_descriptor_;
}

const map_landmark& map_landmark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_5fsegment_2eproto();
  return *default_instance_;
}

map_landmark* map_landmark::default_instance_ = NULL;

map_landmark* map_landmark::New(::google::protobuf::Arena* arena) const {
  map_landmark* n = new map_landmark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void map_landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:map_segment.map.landmark)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(map_landmark, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<map_landmark*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, map_id_);

#undef ZR_HELPER_
#undef ZR_

  coords_.Clear();
  color_.Clear();
}

bool map_landmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:map_segment.map.landmark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_coords;
        break;
      }

      // repeated double coords = 2;
      case 2: {
        if (tag == 18) {
         parse_coords:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_coords())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_coords())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_color;
        break;
      }

      // repeated double color = 3;
      case 3: {
        if (tag == 26) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_color())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_color())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 4;
      case 4: {
        if (tag == 32) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:map_segment.map.landmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:map_segment.map.landmark)
  return false;
#undef DO_
}

void map_landmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:map_segment.map.landmark)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated double coords = 2;
  if (this->coords_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_coords_cached_byte_size_);
  }
  for (int i = 0; i < this->coords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->coords(i), output);
  }

  // repeated double color = 3;
  if (this->color_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_color_cached_byte_size_);
  }
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->color(i), output);
  }

  // optional uint32 map_id = 4;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->map_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:map_segment.map.landmark)
}

::google::protobuf::uint8* map_landmark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_segment.map.landmark)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated double coords = 2;
  if (this->coords_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _coords_cached_byte_size_, target);
  }
  for (int i = 0; i < this->coords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->coords(i), target);
  }

  // repeated double color = 3;
  if (this->color_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _color_cached_byte_size_, target);
  }
  for (int i = 0; i < this->color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->color(i), target);
  }

  // optional uint32 map_id = 4;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->map_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:map_segment.map.landmark)
  return target;
}

int map_landmark::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:map_segment.map.landmark)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 map_id = 4;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_id());
  }

  // repeated double coords = 2;
  {
    int data_size = 0;
    data_size = 8 * this->coords_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _coords_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double color = 3;
  {
    int data_size = 0;
    data_size = 8 * this->color_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _color_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map_landmark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_segment.map.landmark)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const map_landmark* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const map_landmark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_segment.map.landmark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_segment.map.landmark)
    MergeFrom(*source);
  }
}

void map_landmark::MergeFrom(const map_landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_segment.map.landmark)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  coords_.MergeFrom(from.coords_);
  color_.MergeFrom(from.color_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
}

void map_landmark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_segment.map.landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_landmark::CopyFrom(const map_landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_segment.map.landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_landmark::IsInitialized() const {

  return true;
}

void map_landmark::Swap(map_landmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void map_landmark::InternalSwap(map_landmark* other) {
  std::swap(id_, other->id_);
  coords_.UnsafeArenaSwap(&other->coords_);
  color_.UnsafeArenaSwap(&other->color_);
  std::swap(map_id_, other->map_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata map_landmark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_landmark_descriptor_;
  metadata.reflection = map_landmark_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int map_Mat44::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

map_Mat44::map_Mat44()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map_segment.map.Mat44)
}

void map_Mat44::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

map_Mat44::map_Mat44(const map_Mat44& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:map_segment.map.Mat44)
}

void map_Mat44::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

map_Mat44::~map_Mat44() {
  // @@protoc_insertion_point(destructor:map_segment.map.Mat44)
  SharedDtor();
}

void map_Mat44::SharedDtor() {
  if (this != default_instance_) {
  }
}

void map_Mat44::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map_Mat44::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_Mat44_descriptor_;
}

const map_Mat44& map_Mat44::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_5fsegment_2eproto();
  return *default_instance_;
}

map_Mat44* map_Mat44::default_instance_ = NULL;

map_Mat44* map_Mat44::New(::google::protobuf::Arena* arena) const {
  map_Mat44* n = new map_Mat44;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void map_Mat44::Clear() {
// @@protoc_insertion_point(message_clear_start:map_segment.map.Mat44)
  pose_.Clear();
}

bool map_Mat44::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:map_segment.map.Mat44)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double pose = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose())));
        } else if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_pose())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:map_segment.map.Mat44)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:map_segment.map.Mat44)
  return false;
#undef DO_
}

void map_Mat44::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:map_segment.map.Mat44)
  // repeated double pose = 1;
  if (this->pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pose_cached_byte_size_);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->pose(i), output);
  }

  // @@protoc_insertion_point(serialize_end:map_segment.map.Mat44)
}

::google::protobuf::uint8* map_Mat44::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_segment.map.Mat44)
  // repeated double pose = 1;
  if (this->pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pose_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pose(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:map_segment.map.Mat44)
  return target;
}

int map_Mat44::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:map_segment.map.Mat44)
  int total_size = 0;

  // repeated double pose = 1;
  {
    int data_size = 0;
    data_size = 8 * this->pose_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map_Mat44::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_segment.map.Mat44)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const map_Mat44* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const map_Mat44>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_segment.map.Mat44)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_segment.map.Mat44)
    MergeFrom(*source);
  }
}

void map_Mat44::MergeFrom(const map_Mat44& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_segment.map.Mat44)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pose_.MergeFrom(from.pose_);
}

void map_Mat44::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_segment.map.Mat44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_Mat44::CopyFrom(const map_Mat44& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_segment.map.Mat44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_Mat44::IsInitialized() const {

  return true;
}

void map_Mat44::Swap(map_Mat44* other) {
  if (other == this) return;
  InternalSwap(other);
}
void map_Mat44::InternalSwap(map_Mat44* other) {
  pose_.UnsafeArenaSwap(&other->pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata map_Mat44::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_Mat44_descriptor_;
  metadata.reflection = map_Mat44_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int map_merge_message::kSrcFieldNumber;
const int map_merge_message::kDestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

map_merge_message::map_merge_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map_segment.map.merge_message)
}

void map_merge_message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

map_merge_message::map_merge_message(const map_merge_message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:map_segment.map.merge_message)
}

void map_merge_message::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  src_ = 0u;
  dest_ = 0u;
}

map_merge_message::~map_merge_message() {
  // @@protoc_insertion_point(destructor:map_segment.map.merge_message)
  SharedDtor();
}

void map_merge_message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void map_merge_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map_merge_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_merge_message_descriptor_;
}

const map_merge_message& map_merge_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_5fsegment_2eproto();
  return *default_instance_;
}

map_merge_message* map_merge_message::default_instance_ = NULL;

map_merge_message* map_merge_message::New(::google::protobuf::Arena* arena) const {
  map_merge_message* n = new map_merge_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void map_merge_message::Clear() {
// @@protoc_insertion_point(message_clear_start:map_segment.map.merge_message)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(map_merge_message, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<map_merge_message*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(src_, dest_);

#undef ZR_HELPER_
#undef ZR_

}

bool map_merge_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:map_segment.map.merge_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 src = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dest;
        break;
      }

      // optional uint32 dest = 2;
      case 2: {
        if (tag == 16) {
         parse_dest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:map_segment.map.merge_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:map_segment.map.merge_message)
  return false;
#undef DO_
}

void map_merge_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:map_segment.map.merge_message)
  // optional uint32 src = 1;
  if (this->src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src(), output);
  }

  // optional uint32 dest = 2;
  if (this->dest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dest(), output);
  }

  // @@protoc_insertion_point(serialize_end:map_segment.map.merge_message)
}

::google::protobuf::uint8* map_merge_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_segment.map.merge_message)
  // optional uint32 src = 1;
  if (this->src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src(), target);
  }

  // optional uint32 dest = 2;
  if (this->dest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dest(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:map_segment.map.merge_message)
  return target;
}

int map_merge_message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:map_segment.map.merge_message)
  int total_size = 0;

  // optional uint32 src = 1;
  if (this->src() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->src());
  }

  // optional uint32 dest = 2;
  if (this->dest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dest());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map_merge_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_segment.map.merge_message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const map_merge_message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const map_merge_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_segment.map.merge_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_segment.map.merge_message)
    MergeFrom(*source);
  }
}

void map_merge_message::MergeFrom(const map_merge_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_segment.map.merge_message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.src() != 0) {
    set_src(from.src());
  }
  if (from.dest() != 0) {
    set_dest(from.dest());
  }
}

void map_merge_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_segment.map.merge_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_merge_message::CopyFrom(const map_merge_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_segment.map.merge_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_merge_message::IsInitialized() const {

  return true;
}

void map_merge_message::Swap(map_merge_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void map_merge_message::InternalSwap(map_merge_message* other) {
  std::swap(src_, other->src_);
  std::swap(dest_, other->dest_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata map_merge_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_merge_message_descriptor_;
  metadata.reflection = map_merge_message_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int map::kKeyframesFieldNumber;
const int map::kEdgesFieldNumber;
const int map::kLandmarksFieldNumber;
const int map::kMergeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

map::map()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map_segment.map)
}

void map::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  merge_ids_ = const_cast< ::map_segment::map_merge_message*>(&::map_segment::map_merge_message::default_instance());
}

map::map(const map& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:map_segment.map)
}

void map::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  merge_ids_ = NULL;
}

map::~map() {
  // @@protoc_insertion_point(destructor:map_segment.map)
  SharedDtor();
}

void map::SharedDtor() {
  if (this != default_instance_) {
    delete merge_ids_;
  }
}

void map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_descriptor_;
}

const map& map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_5fsegment_2eproto();
  return *default_instance_;
}

map* map::default_instance_ = NULL;

map* map::New(::google::protobuf::Arena* arena) const {
  map* n = new map;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void map::Clear() {
// @@protoc_insertion_point(message_clear_start:map_segment.map)
  if (GetArenaNoVirtual() == NULL && merge_ids_ != NULL) delete merge_ids_;
  merge_ids_ = NULL;
  keyframes_.Clear();
  edges_.Clear();
  landmarks_.Clear();
}

bool map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:map_segment.map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .map_segment.map.keyframe keyframes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keyframes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keyframes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keyframes;
        if (input->ExpectTag(18)) goto parse_loop_edges;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .map_segment.map.edge edges = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_edges;
        if (input->ExpectTag(26)) goto parse_loop_landmarks;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .map_segment.map.landmark landmarks = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_landmarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_landmarks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_merge_ids;
        break;
      }

      // optional .map_segment.map.merge_message merge_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_merge_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:map_segment.map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:map_segment.map)
  return false;
#undef DO_
}

void map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:map_segment.map)
  // repeated .map_segment.map.keyframe keyframes = 1;
  for (unsigned int i = 0, n = this->keyframes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keyframes(i), output);
  }

  // repeated .map_segment.map.edge edges = 2;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edges(i), output);
  }

  // repeated .map_segment.map.landmark landmarks = 3;
  for (unsigned int i = 0, n = this->landmarks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->landmarks(i), output);
  }

  // optional .map_segment.map.merge_message merge_ids = 4;
  if (this->has_merge_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->merge_ids_, output);
  }

  // @@protoc_insertion_point(serialize_end:map_segment.map)
}

::google::protobuf::uint8* map::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_segment.map)
  // repeated .map_segment.map.keyframe keyframes = 1;
  for (unsigned int i = 0, n = this->keyframes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keyframes(i), false, target);
  }

  // repeated .map_segment.map.edge edges = 2;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edges(i), false, target);
  }

  // repeated .map_segment.map.landmark landmarks = 3;
  for (unsigned int i = 0, n = this->landmarks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->landmarks(i), false, target);
  }

  // optional .map_segment.map.merge_message merge_ids = 4;
  if (this->has_merge_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->merge_ids_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:map_segment.map)
  return target;
}

int map::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:map_segment.map)
  int total_size = 0;

  // optional .map_segment.map.merge_message merge_ids = 4;
  if (this->has_merge_ids()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->merge_ids_);
  }

  // repeated .map_segment.map.keyframe keyframes = 1;
  total_size += 1 * this->keyframes_size();
  for (int i = 0; i < this->keyframes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyframes(i));
  }

  // repeated .map_segment.map.edge edges = 2;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  // repeated .map_segment.map.landmark landmarks = 3;
  total_size += 1 * this->landmarks_size();
  for (int i = 0; i < this->landmarks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmarks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_segment.map)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const map* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const map>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_segment.map)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_segment.map)
    MergeFrom(*source);
  }
}

void map::MergeFrom(const map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_segment.map)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keyframes_.MergeFrom(from.keyframes_);
  edges_.MergeFrom(from.edges_);
  landmarks_.MergeFrom(from.landmarks_);
  if (from.has_merge_ids()) {
    mutable_merge_ids()->::map_segment::map_merge_message::MergeFrom(from.merge_ids());
  }
}

void map::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_segment.map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map::CopyFrom(const map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_segment.map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map::IsInitialized() const {

  return true;
}

void map::Swap(map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void map::InternalSwap(map* other) {
  keyframes_.UnsafeArenaSwap(&other->keyframes_);
  edges_.UnsafeArenaSwap(&other->edges_);
  landmarks_.UnsafeArenaSwap(&other->landmarks_);
  std::swap(merge_ids_, other->merge_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_descriptor_;
  metadata.reflection = map_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// map_keyframe

// optional uint32 id = 1;
void map_keyframe::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 map_keyframe::id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.id)
  return id_;
}
 void map_keyframe::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.keyframe.id)
}

// optional .map_segment.map.Mat44 pose = 2;
bool map_keyframe::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
void map_keyframe::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::map_segment::map_Mat44& map_keyframe::pose() const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::map_segment::map_Mat44* map_keyframe::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::map_segment::map_Mat44;
  }
  // @@protoc_insertion_point(field_mutable:map_segment.map.keyframe.pose)
  return pose_;
}
::map_segment::map_Mat44* map_keyframe::release_pose() {
  // @@protoc_insertion_point(field_release:map_segment.map.keyframe.pose)
  
  ::map_segment::map_Mat44* temp = pose_;
  pose_ = NULL;
  return temp;
}
void map_keyframe::set_allocated_pose(::map_segment::map_Mat44* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:map_segment.map.keyframe.pose)
}

// optional uint32 robot_id = 3;
void map_keyframe::clear_robot_id() {
  robot_id_ = 0u;
}
 ::google::protobuf::uint32 map_keyframe::robot_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.robot_id)
  return robot_id_;
}
 void map_keyframe::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.keyframe.robot_id)
}

// optional uint32 map_id = 4;
void map_keyframe::clear_map_id() {
  map_id_ = 0u;
}
 ::google::protobuf::uint32 map_keyframe::map_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.map_id)
  return map_id_;
}
 void map_keyframe::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.keyframe.map_id)
}

// -------------------------------------------------------------------

// map_edge

// optional uint32 id0 = 1;
void map_edge::clear_id0() {
  id0_ = 0u;
}
 ::google::protobuf::uint32 map_edge::id0() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.id0)
  return id0_;
}
 void map_edge::set_id0(::google::protobuf::uint32 value) {
  
  id0_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.id0)
}

// optional uint32 id1 = 2;
void map_edge::clear_id1() {
  id1_ = 0u;
}
 ::google::protobuf::uint32 map_edge::id1() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.id1)
  return id1_;
}
 void map_edge::set_id1(::google::protobuf::uint32 value) {
  
  id1_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.id1)
}

// optional uint32 robot_id = 3;
void map_edge::clear_robot_id() {
  robot_id_ = 0u;
}
 ::google::protobuf::uint32 map_edge::robot_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.robot_id)
  return robot_id_;
}
 void map_edge::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.robot_id)
}

// optional uint32 map_id = 4;
void map_edge::clear_map_id() {
  map_id_ = 0u;
}
 ::google::protobuf::uint32 map_edge::map_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.map_id)
  return map_id_;
}
 void map_edge::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.map_id)
}

// -------------------------------------------------------------------

// map_landmark

// optional uint32 id = 1;
void map_landmark::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 map_landmark::id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.id)
  return id_;
}
 void map_landmark::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.id)
}

// repeated double coords = 2;
int map_landmark::coords_size() const {
  return coords_.size();
}
void map_landmark::clear_coords() {
  coords_.Clear();
}
 double map_landmark::coords(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.coords)
  return coords_.Get(index);
}
 void map_landmark::set_coords(int index, double value) {
  coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.coords)
}
 void map_landmark::add_coords(double value) {
  coords_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.landmark.coords)
}
 const ::google::protobuf::RepeatedField< double >&
map_landmark::coords() const {
  // @@protoc_insertion_point(field_list:map_segment.map.landmark.coords)
  return coords_;
}
 ::google::protobuf::RepeatedField< double >*
map_landmark::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.landmark.coords)
  return &coords_;
}

// repeated double color = 3;
int map_landmark::color_size() const {
  return color_.size();
}
void map_landmark::clear_color() {
  color_.Clear();
}
 double map_landmark::color(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.color)
  return color_.Get(index);
}
 void map_landmark::set_color(int index, double value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.color)
}
 void map_landmark::add_color(double value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.landmark.color)
}
 const ::google::protobuf::RepeatedField< double >&
map_landmark::color() const {
  // @@protoc_insertion_point(field_list:map_segment.map.landmark.color)
  return color_;
}
 ::google::protobuf::RepeatedField< double >*
map_landmark::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.landmark.color)
  return &color_;
}

// optional uint32 map_id = 4;
void map_landmark::clear_map_id() {
  map_id_ = 0u;
}
 ::google::protobuf::uint32 map_landmark::map_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.map_id)
  return map_id_;
}
 void map_landmark::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.map_id)
}

// -------------------------------------------------------------------

// map_Mat44

// repeated double pose = 1;
int map_Mat44::pose_size() const {
  return pose_.size();
}
void map_Mat44::clear_pose() {
  pose_.Clear();
}
 double map_Mat44::pose(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.Mat44.pose)
  return pose_.Get(index);
}
 void map_Mat44::set_pose(int index, double value) {
  pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.Mat44.pose)
}
 void map_Mat44::add_pose(double value) {
  pose_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.Mat44.pose)
}
 const ::google::protobuf::RepeatedField< double >&
map_Mat44::pose() const {
  // @@protoc_insertion_point(field_list:map_segment.map.Mat44.pose)
  return pose_;
}
 ::google::protobuf::RepeatedField< double >*
map_Mat44::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.Mat44.pose)
  return &pose_;
}

// -------------------------------------------------------------------

// map_merge_message

// optional uint32 src = 1;
void map_merge_message::clear_src() {
  src_ = 0u;
}
 ::google::protobuf::uint32 map_merge_message::src() const {
  // @@protoc_insertion_point(field_get:map_segment.map.merge_message.src)
  return src_;
}
 void map_merge_message::set_src(::google::protobuf::uint32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.merge_message.src)
}

// optional uint32 dest = 2;
void map_merge_message::clear_dest() {
  dest_ = 0u;
}
 ::google::protobuf::uint32 map_merge_message::dest() const {
  // @@protoc_insertion_point(field_get:map_segment.map.merge_message.dest)
  return dest_;
}
 void map_merge_message::set_dest(::google::protobuf::uint32 value) {
  
  dest_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.merge_message.dest)
}

// -------------------------------------------------------------------

// map

// repeated .map_segment.map.keyframe keyframes = 1;
int map::keyframes_size() const {
  return keyframes_.size();
}
void map::clear_keyframes() {
  keyframes_.Clear();
}
const ::map_segment::map_keyframe& map::keyframes(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframes)
  return keyframes_.Get(index);
}
::map_segment::map_keyframe* map::mutable_keyframes(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.keyframes)
  return keyframes_.Mutable(index);
}
::map_segment::map_keyframe* map::add_keyframes() {
  // @@protoc_insertion_point(field_add:map_segment.map.keyframes)
  return keyframes_.Add();
}
::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >*
map::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.keyframes)
  return &keyframes_;
}
const ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >&
map::keyframes() const {
  // @@protoc_insertion_point(field_list:map_segment.map.keyframes)
  return keyframes_;
}

// repeated .map_segment.map.edge edges = 2;
int map::edges_size() const {
  return edges_.size();
}
void map::clear_edges() {
  edges_.Clear();
}
const ::map_segment::map_edge& map::edges(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.edges)
  return edges_.Get(index);
}
::map_segment::map_edge* map::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.edges)
  return edges_.Mutable(index);
}
::map_segment::map_edge* map::add_edges() {
  // @@protoc_insertion_point(field_add:map_segment.map.edges)
  return edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >*
map::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.edges)
  return &edges_;
}
const ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >&
map::edges() const {
  // @@protoc_insertion_point(field_list:map_segment.map.edges)
  return edges_;
}

// repeated .map_segment.map.landmark landmarks = 3;
int map::landmarks_size() const {
  return landmarks_.size();
}
void map::clear_landmarks() {
  landmarks_.Clear();
}
const ::map_segment::map_landmark& map::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmarks)
  return landmarks_.Get(index);
}
::map_segment::map_landmark* map::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.landmarks)
  return landmarks_.Mutable(index);
}
::map_segment::map_landmark* map::add_landmarks() {
  // @@protoc_insertion_point(field_add:map_segment.map.landmarks)
  return landmarks_.Add();
}
::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >*
map::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.landmarks)
  return &landmarks_;
}
const ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >&
map::landmarks() const {
  // @@protoc_insertion_point(field_list:map_segment.map.landmarks)
  return landmarks_;
}

// optional .map_segment.map.merge_message merge_ids = 4;
bool map::has_merge_ids() const {
  return !_is_default_instance_ && merge_ids_ != NULL;
}
void map::clear_merge_ids() {
  if (GetArenaNoVirtual() == NULL && merge_ids_ != NULL) delete merge_ids_;
  merge_ids_ = NULL;
}
const ::map_segment::map_merge_message& map::merge_ids() const {
  // @@protoc_insertion_point(field_get:map_segment.map.merge_ids)
  return merge_ids_ != NULL ? *merge_ids_ : *default_instance_->merge_ids_;
}
::map_segment::map_merge_message* map::mutable_merge_ids() {
  
  if (merge_ids_ == NULL) {
    merge_ids_ = new ::map_segment::map_merge_message;
  }
  // @@protoc_insertion_point(field_mutable:map_segment.map.merge_ids)
  return merge_ids_;
}
::map_segment::map_merge_message* map::release_merge_ids() {
  // @@protoc_insertion_point(field_release:map_segment.map.merge_ids)
  
  ::map_segment::map_merge_message* temp = merge_ids_;
  merge_ids_ = NULL;
  return temp;
}
void map::set_allocated_merge_ids(::map_segment::map_merge_message* merge_ids) {
  delete merge_ids_;
  merge_ids_ = merge_ids;
  if (merge_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:map_segment.map.merge_ids)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace map_segment

// @@protoc_insertion_point(global_scope)
