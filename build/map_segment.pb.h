// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_segment.proto

#ifndef PROTOBUF_map_5fsegment_2eproto__INCLUDED
#define PROTOBUF_map_5fsegment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace map_segment {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_map_5fsegment_2eproto();
void protobuf_AssignDesc_map_5fsegment_2eproto();
void protobuf_ShutdownFile_map_5fsegment_2eproto();

class map;
class map_Mat44;
class map_edge;
class map_keyframe;
class map_landmark;
class map_merge_message;

// ===================================================================

class map_keyframe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.keyframe) */ {
 public:
  map_keyframe();
  virtual ~map_keyframe();

  map_keyframe(const map_keyframe& from);

  inline map_keyframe& operator=(const map_keyframe& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const map_keyframe& default_instance();

  void Swap(map_keyframe* other);

  // implements Message ----------------------------------------------

  inline map_keyframe* New() const { return New(NULL); }

  map_keyframe* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const map_keyframe& from);
  void MergeFrom(const map_keyframe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(map_keyframe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .map_segment.map.Mat44 pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::map_segment::map_Mat44& pose() const;
  ::map_segment::map_Mat44* mutable_pose();
  ::map_segment::map_Mat44* release_pose();
  void set_allocated_pose(::map_segment::map_Mat44* pose);

  // optional uint32 robot_id = 3;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 3;
  ::google::protobuf::uint32 robot_id() const;
  void set_robot_id(::google::protobuf::uint32 value);

  // optional uint32 map_id = 4;
  void clear_map_id();
  static const int kMapIdFieldNumber = 4;
  ::google::protobuf::uint32 map_id() const;
  void set_map_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:map_segment.map.keyframe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::map_segment::map_Mat44* pose_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 robot_id_;
  ::google::protobuf::uint32 map_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_map_5fsegment_2eproto();
  friend void protobuf_AssignDesc_map_5fsegment_2eproto();
  friend void protobuf_ShutdownFile_map_5fsegment_2eproto();

  void InitAsDefaultInstance();
  static map_keyframe* default_instance_;
};
// -------------------------------------------------------------------

class map_edge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.edge) */ {
 public:
  map_edge();
  virtual ~map_edge();

  map_edge(const map_edge& from);

  inline map_edge& operator=(const map_edge& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const map_edge& default_instance();

  void Swap(map_edge* other);

  // implements Message ----------------------------------------------

  inline map_edge* New() const { return New(NULL); }

  map_edge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const map_edge& from);
  void MergeFrom(const map_edge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(map_edge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id0 = 1;
  void clear_id0();
  static const int kId0FieldNumber = 1;
  ::google::protobuf::uint32 id0() const;
  void set_id0(::google::protobuf::uint32 value);

  // optional uint32 id1 = 2;
  void clear_id1();
  static const int kId1FieldNumber = 2;
  ::google::protobuf::uint32 id1() const;
  void set_id1(::google::protobuf::uint32 value);

  // optional uint32 robot_id = 3;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 3;
  ::google::protobuf::uint32 robot_id() const;
  void set_robot_id(::google::protobuf::uint32 value);

  // optional uint32 map_id = 4;
  void clear_map_id();
  static const int kMapIdFieldNumber = 4;
  ::google::protobuf::uint32 map_id() const;
  void set_map_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:map_segment.map.edge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 id0_;
  ::google::protobuf::uint32 id1_;
  ::google::protobuf::uint32 robot_id_;
  ::google::protobuf::uint32 map_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_map_5fsegment_2eproto();
  friend void protobuf_AssignDesc_map_5fsegment_2eproto();
  friend void protobuf_ShutdownFile_map_5fsegment_2eproto();

  void InitAsDefaultInstance();
  static map_edge* default_instance_;
};
// -------------------------------------------------------------------

class map_landmark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.landmark) */ {
 public:
  map_landmark();
  virtual ~map_landmark();

  map_landmark(const map_landmark& from);

  inline map_landmark& operator=(const map_landmark& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const map_landmark& default_instance();

  void Swap(map_landmark* other);

  // implements Message ----------------------------------------------

  inline map_landmark* New() const { return New(NULL); }

  map_landmark* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const map_landmark& from);
  void MergeFrom(const map_landmark& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(map_landmark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // repeated double coords = 2;
  int coords_size() const;
  void clear_coords();
  static const int kCoordsFieldNumber = 2;
  double coords(int index) const;
  void set_coords(int index, double value);
  void add_coords(double value);
  const ::google::protobuf::RepeatedField< double >&
      coords() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_coords();

  // repeated double color = 3;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  double color(int index) const;
  void set_color(int index, double value);
  void add_color(double value);
  const ::google::protobuf::RepeatedField< double >&
      color() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_color();

  // optional uint32 map_id = 4;
  void clear_map_id();
  static const int kMapIdFieldNumber = 4;
  ::google::protobuf::uint32 map_id() const;
  void set_map_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:map_segment.map.landmark)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< double > coords_;
  mutable int _coords_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::RepeatedField< double > color_;
  mutable int _color_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_map_5fsegment_2eproto();
  friend void protobuf_AssignDesc_map_5fsegment_2eproto();
  friend void protobuf_ShutdownFile_map_5fsegment_2eproto();

  void InitAsDefaultInstance();
  static map_landmark* default_instance_;
};
// -------------------------------------------------------------------

class map_Mat44 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.Mat44) */ {
 public:
  map_Mat44();
  virtual ~map_Mat44();

  map_Mat44(const map_Mat44& from);

  inline map_Mat44& operator=(const map_Mat44& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const map_Mat44& default_instance();

  void Swap(map_Mat44* other);

  // implements Message ----------------------------------------------

  inline map_Mat44* New() const { return New(NULL); }

  map_Mat44* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const map_Mat44& from);
  void MergeFrom(const map_Mat44& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(map_Mat44* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pose = 1;
  int pose_size() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  double pose(int index) const;
  void set_pose(int index, double value);
  void add_pose(double value);
  const ::google::protobuf::RepeatedField< double >&
      pose() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pose();

  // @@protoc_insertion_point(class_scope:map_segment.map.Mat44)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< double > pose_;
  mutable int _pose_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_map_5fsegment_2eproto();
  friend void protobuf_AssignDesc_map_5fsegment_2eproto();
  friend void protobuf_ShutdownFile_map_5fsegment_2eproto();

  void InitAsDefaultInstance();
  static map_Mat44* default_instance_;
};
// -------------------------------------------------------------------

class map_merge_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.merge_message) */ {
 public:
  map_merge_message();
  virtual ~map_merge_message();

  map_merge_message(const map_merge_message& from);

  inline map_merge_message& operator=(const map_merge_message& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const map_merge_message& default_instance();

  void Swap(map_merge_message* other);

  // implements Message ----------------------------------------------

  inline map_merge_message* New() const { return New(NULL); }

  map_merge_message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const map_merge_message& from);
  void MergeFrom(const map_merge_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(map_merge_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 src = 1;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  ::google::protobuf::uint32 src() const;
  void set_src(::google::protobuf::uint32 value);

  // optional uint32 dest = 2;
  void clear_dest();
  static const int kDestFieldNumber = 2;
  ::google::protobuf::uint32 dest() const;
  void set_dest(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:map_segment.map.merge_message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 src_;
  ::google::protobuf::uint32 dest_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_map_5fsegment_2eproto();
  friend void protobuf_AssignDesc_map_5fsegment_2eproto();
  friend void protobuf_ShutdownFile_map_5fsegment_2eproto();

  void InitAsDefaultInstance();
  static map_merge_message* default_instance_;
};
// -------------------------------------------------------------------

class map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map) */ {
 public:
  map();
  virtual ~map();

  map(const map& from);

  inline map& operator=(const map& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const map& default_instance();

  void Swap(map* other);

  // implements Message ----------------------------------------------

  inline map* New() const { return New(NULL); }

  map* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const map& from);
  void MergeFrom(const map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef map_keyframe keyframe;
  typedef map_edge edge;
  typedef map_landmark landmark;
  typedef map_Mat44 Mat44;
  typedef map_merge_message merge_message;

  // accessors -------------------------------------------------------

  // repeated .map_segment.map.keyframe keyframes = 1;
  int keyframes_size() const;
  void clear_keyframes();
  static const int kKeyframesFieldNumber = 1;
  const ::map_segment::map_keyframe& keyframes(int index) const;
  ::map_segment::map_keyframe* mutable_keyframes(int index);
  ::map_segment::map_keyframe* add_keyframes();
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >*
      mutable_keyframes();
  const ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >&
      keyframes() const;

  // repeated .map_segment.map.edge edges = 2;
  int edges_size() const;
  void clear_edges();
  static const int kEdgesFieldNumber = 2;
  const ::map_segment::map_edge& edges(int index) const;
  ::map_segment::map_edge* mutable_edges(int index);
  ::map_segment::map_edge* add_edges();
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >*
      mutable_edges();
  const ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >&
      edges() const;

  // repeated .map_segment.map.landmark landmarks = 3;
  int landmarks_size() const;
  void clear_landmarks();
  static const int kLandmarksFieldNumber = 3;
  const ::map_segment::map_landmark& landmarks(int index) const;
  ::map_segment::map_landmark* mutable_landmarks(int index);
  ::map_segment::map_landmark* add_landmarks();
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >*
      mutable_landmarks();
  const ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >&
      landmarks() const;

  // optional .map_segment.map.merge_message merge_ids = 4;
  bool has_merge_ids() const;
  void clear_merge_ids();
  static const int kMergeIdsFieldNumber = 4;
  const ::map_segment::map_merge_message& merge_ids() const;
  ::map_segment::map_merge_message* mutable_merge_ids();
  ::map_segment::map_merge_message* release_merge_ids();
  void set_allocated_merge_ids(::map_segment::map_merge_message* merge_ids);

  // @@protoc_insertion_point(class_scope:map_segment.map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe > keyframes_;
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge > edges_;
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark > landmarks_;
  ::map_segment::map_merge_message* merge_ids_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_map_5fsegment_2eproto();
  friend void protobuf_AssignDesc_map_5fsegment_2eproto();
  friend void protobuf_ShutdownFile_map_5fsegment_2eproto();

  void InitAsDefaultInstance();
  static map* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// map_keyframe

// optional uint32 id = 1;
inline void map_keyframe::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 map_keyframe::id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.id)
  return id_;
}
inline void map_keyframe::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.keyframe.id)
}

// optional .map_segment.map.Mat44 pose = 2;
inline bool map_keyframe::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
inline void map_keyframe::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::map_segment::map_Mat44& map_keyframe::pose() const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::map_segment::map_Mat44* map_keyframe::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::map_segment::map_Mat44;
  }
  // @@protoc_insertion_point(field_mutable:map_segment.map.keyframe.pose)
  return pose_;
}
inline ::map_segment::map_Mat44* map_keyframe::release_pose() {
  // @@protoc_insertion_point(field_release:map_segment.map.keyframe.pose)
  
  ::map_segment::map_Mat44* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void map_keyframe::set_allocated_pose(::map_segment::map_Mat44* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:map_segment.map.keyframe.pose)
}

// optional uint32 robot_id = 3;
inline void map_keyframe::clear_robot_id() {
  robot_id_ = 0u;
}
inline ::google::protobuf::uint32 map_keyframe::robot_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.robot_id)
  return robot_id_;
}
inline void map_keyframe::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.keyframe.robot_id)
}

// optional uint32 map_id = 4;
inline void map_keyframe::clear_map_id() {
  map_id_ = 0u;
}
inline ::google::protobuf::uint32 map_keyframe::map_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.map_id)
  return map_id_;
}
inline void map_keyframe::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.keyframe.map_id)
}

// -------------------------------------------------------------------

// map_edge

// optional uint32 id0 = 1;
inline void map_edge::clear_id0() {
  id0_ = 0u;
}
inline ::google::protobuf::uint32 map_edge::id0() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.id0)
  return id0_;
}
inline void map_edge::set_id0(::google::protobuf::uint32 value) {
  
  id0_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.id0)
}

// optional uint32 id1 = 2;
inline void map_edge::clear_id1() {
  id1_ = 0u;
}
inline ::google::protobuf::uint32 map_edge::id1() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.id1)
  return id1_;
}
inline void map_edge::set_id1(::google::protobuf::uint32 value) {
  
  id1_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.id1)
}

// optional uint32 robot_id = 3;
inline void map_edge::clear_robot_id() {
  robot_id_ = 0u;
}
inline ::google::protobuf::uint32 map_edge::robot_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.robot_id)
  return robot_id_;
}
inline void map_edge::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.robot_id)
}

// optional uint32 map_id = 4;
inline void map_edge::clear_map_id() {
  map_id_ = 0u;
}
inline ::google::protobuf::uint32 map_edge::map_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.map_id)
  return map_id_;
}
inline void map_edge::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.map_id)
}

// -------------------------------------------------------------------

// map_landmark

// optional uint32 id = 1;
inline void map_landmark::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 map_landmark::id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.id)
  return id_;
}
inline void map_landmark::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.id)
}

// repeated double coords = 2;
inline int map_landmark::coords_size() const {
  return coords_.size();
}
inline void map_landmark::clear_coords() {
  coords_.Clear();
}
inline double map_landmark::coords(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.coords)
  return coords_.Get(index);
}
inline void map_landmark::set_coords(int index, double value) {
  coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.coords)
}
inline void map_landmark::add_coords(double value) {
  coords_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.landmark.coords)
}
inline const ::google::protobuf::RepeatedField< double >&
map_landmark::coords() const {
  // @@protoc_insertion_point(field_list:map_segment.map.landmark.coords)
  return coords_;
}
inline ::google::protobuf::RepeatedField< double >*
map_landmark::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.landmark.coords)
  return &coords_;
}

// repeated double color = 3;
inline int map_landmark::color_size() const {
  return color_.size();
}
inline void map_landmark::clear_color() {
  color_.Clear();
}
inline double map_landmark::color(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.color)
  return color_.Get(index);
}
inline void map_landmark::set_color(int index, double value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.color)
}
inline void map_landmark::add_color(double value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.landmark.color)
}
inline const ::google::protobuf::RepeatedField< double >&
map_landmark::color() const {
  // @@protoc_insertion_point(field_list:map_segment.map.landmark.color)
  return color_;
}
inline ::google::protobuf::RepeatedField< double >*
map_landmark::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.landmark.color)
  return &color_;
}

// optional uint32 map_id = 4;
inline void map_landmark::clear_map_id() {
  map_id_ = 0u;
}
inline ::google::protobuf::uint32 map_landmark::map_id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.map_id)
  return map_id_;
}
inline void map_landmark::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.map_id)
}

// -------------------------------------------------------------------

// map_Mat44

// repeated double pose = 1;
inline int map_Mat44::pose_size() const {
  return pose_.size();
}
inline void map_Mat44::clear_pose() {
  pose_.Clear();
}
inline double map_Mat44::pose(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.Mat44.pose)
  return pose_.Get(index);
}
inline void map_Mat44::set_pose(int index, double value) {
  pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.Mat44.pose)
}
inline void map_Mat44::add_pose(double value) {
  pose_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.Mat44.pose)
}
inline const ::google::protobuf::RepeatedField< double >&
map_Mat44::pose() const {
  // @@protoc_insertion_point(field_list:map_segment.map.Mat44.pose)
  return pose_;
}
inline ::google::protobuf::RepeatedField< double >*
map_Mat44::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.Mat44.pose)
  return &pose_;
}

// -------------------------------------------------------------------

// map_merge_message

// optional uint32 src = 1;
inline void map_merge_message::clear_src() {
  src_ = 0u;
}
inline ::google::protobuf::uint32 map_merge_message::src() const {
  // @@protoc_insertion_point(field_get:map_segment.map.merge_message.src)
  return src_;
}
inline void map_merge_message::set_src(::google::protobuf::uint32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.merge_message.src)
}

// optional uint32 dest = 2;
inline void map_merge_message::clear_dest() {
  dest_ = 0u;
}
inline ::google::protobuf::uint32 map_merge_message::dest() const {
  // @@protoc_insertion_point(field_get:map_segment.map.merge_message.dest)
  return dest_;
}
inline void map_merge_message::set_dest(::google::protobuf::uint32 value) {
  
  dest_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.merge_message.dest)
}

// -------------------------------------------------------------------

// map

// repeated .map_segment.map.keyframe keyframes = 1;
inline int map::keyframes_size() const {
  return keyframes_.size();
}
inline void map::clear_keyframes() {
  keyframes_.Clear();
}
inline const ::map_segment::map_keyframe& map::keyframes(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframes)
  return keyframes_.Get(index);
}
inline ::map_segment::map_keyframe* map::mutable_keyframes(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.keyframes)
  return keyframes_.Mutable(index);
}
inline ::map_segment::map_keyframe* map::add_keyframes() {
  // @@protoc_insertion_point(field_add:map_segment.map.keyframes)
  return keyframes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >*
map::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.keyframes)
  return &keyframes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >&
map::keyframes() const {
  // @@protoc_insertion_point(field_list:map_segment.map.keyframes)
  return keyframes_;
}

// repeated .map_segment.map.edge edges = 2;
inline int map::edges_size() const {
  return edges_.size();
}
inline void map::clear_edges() {
  edges_.Clear();
}
inline const ::map_segment::map_edge& map::edges(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.edges)
  return edges_.Get(index);
}
inline ::map_segment::map_edge* map::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.edges)
  return edges_.Mutable(index);
}
inline ::map_segment::map_edge* map::add_edges() {
  // @@protoc_insertion_point(field_add:map_segment.map.edges)
  return edges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >*
map::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.edges)
  return &edges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >&
map::edges() const {
  // @@protoc_insertion_point(field_list:map_segment.map.edges)
  return edges_;
}

// repeated .map_segment.map.landmark landmarks = 3;
inline int map::landmarks_size() const {
  return landmarks_.size();
}
inline void map::clear_landmarks() {
  landmarks_.Clear();
}
inline const ::map_segment::map_landmark& map::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmarks)
  return landmarks_.Get(index);
}
inline ::map_segment::map_landmark* map::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.landmarks)
  return landmarks_.Mutable(index);
}
inline ::map_segment::map_landmark* map::add_landmarks() {
  // @@protoc_insertion_point(field_add:map_segment.map.landmarks)
  return landmarks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >*
map::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.landmarks)
  return &landmarks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >&
map::landmarks() const {
  // @@protoc_insertion_point(field_list:map_segment.map.landmarks)
  return landmarks_;
}

// optional .map_segment.map.merge_message merge_ids = 4;
inline bool map::has_merge_ids() const {
  return !_is_default_instance_ && merge_ids_ != NULL;
}
inline void map::clear_merge_ids() {
  if (GetArenaNoVirtual() == NULL && merge_ids_ != NULL) delete merge_ids_;
  merge_ids_ = NULL;
}
inline const ::map_segment::map_merge_message& map::merge_ids() const {
  // @@protoc_insertion_point(field_get:map_segment.map.merge_ids)
  return merge_ids_ != NULL ? *merge_ids_ : *default_instance_->merge_ids_;
}
inline ::map_segment::map_merge_message* map::mutable_merge_ids() {
  
  if (merge_ids_ == NULL) {
    merge_ids_ = new ::map_segment::map_merge_message;
  }
  // @@protoc_insertion_point(field_mutable:map_segment.map.merge_ids)
  return merge_ids_;
}
inline ::map_segment::map_merge_message* map::release_merge_ids() {
  // @@protoc_insertion_point(field_release:map_segment.map.merge_ids)
  
  ::map_segment::map_merge_message* temp = merge_ids_;
  merge_ids_ = NULL;
  return temp;
}
inline void map::set_allocated_merge_ids(::map_segment::map_merge_message* merge_ids) {
  delete merge_ids_;
  merge_ids_ = merge_ids;
  if (merge_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:map_segment.map.merge_ids)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace map_segment

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_5fsegment_2eproto__INCLUDED
